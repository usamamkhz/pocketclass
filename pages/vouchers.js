import React, { useState, useEffect } from 'react';
import { db, auth } from '../firebaseConfig';
import { useAuthState } from 'react-firebase-hooks/auth';
import { addDoc, collection, deleteDoc, doc, getDocs, query, where } from 'firebase/firestore';
import { ToastContainer, toast } from 'react-toastify';
import Header from '../components/Header';
import Head from 'next/head';
import Footer from '../components/Footer';
import Image from 'next/image';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faDeleteLeft, faRandom, faTrash, faTrashCan } from '@fortawesome/free-solid-svg-icons';

const VoucherManager = () => {
    const [user, loading, error] = useAuthState(auth);
    const [vouchers, setVouchers] = useState([]);
    const [loader, setLoader] = useState(false);
    const [btnLoading, setBtnLoading] = useState(false);
    const todaysDate = new Date().getTime();
    const nextDate = new Date(todaysDate + 24 * 60 * 60 * 1000);
    const [form, setForm] = useState({
        code: '',
        discountValue: 0,
        expiryDate: nextDate.toISOString().replace('T', ' ').replace('Z', ''),
        remainingUses: 1,
        discountType: 'percentage',
        userId: user?.uid  // Include user ID in the voucher data
    });

    const fetchVouchers = async () => {
        try {
            const querySnapshot = await getDocs(
                query(
                    collection(db, "vouchers"),
                    where("userId", "==", user?.uid),
                )
            );

            const apps = querySnapshot?.docs?.map?.((doc) => ({ id: doc.id, ...doc.data() }));
            //sort the vouchers by expiry date
            apps.sort((a, b) => new Date(a.expiryDate) - new Date(b.expiryDate));

            setVouchers(apps || []);
            console.log(apps);
        } catch (error) {
            toast.error("Voucher Loading Error!", {
                toastId: "voucherError",
            });
            console.error(error);
        }
    };

    useEffect(() => {
        if (user) {
            fetchVouchers();
        }
    }, [user]);

    const handleChange = (e) => {
        console.log(e.target.value);
        if(e.target.value==='percentage'){
            setForm({...form,discountType:'percentage'})
            return;
        }
        if(e.target.value==='amount'){
            setForm({...form,discountType:'amount'})
            return;
        }
        if(e.target.name==='expiryDate'){
            setForm({...form,expiryDate:e.target.value})
            return;
        }
        setForm({ ...form, [e.target.name]: e.target.value });
    };
useEffect(() => {
    console.log(form);
}, [form]);
    const handleSubmit = async (e) => {
        e.preventDefault();
        setBtnLoading(true);
        console.log(form);
        if (!user) return;  // Ensure that there is a user logged in
        const newVoucher = {
            ...form,
            remainingUses: Number(form.remainingUses),
            expiryDate: new Date(form.expiryDate),
            userId: user.uid  // Assign the user ID to the voucher
        };
        addDoc(collection(db, 'vouchers'), newVoucher);
        setVouchers([...vouchers, newVoucher]);
        setBtnLoading(false);
        setForm({ code: '',  discountValue: 0, expiryDate: todaysDate, remainingUses: 1, userId: user?.uid });
        fetchVouchers();
        toast.success('Voucher added successfully');
    };
    const handleDelete = async (id) => {
        setLoader(true);
        try {
            await deleteDoc(doc(db, 'vouchers', id));
            setVouchers(vouchers.filter((voucher) => voucher.id !== id));
            toast.success('Voucher deleted successfully');
            setLoader(false);
        } catch (error) {
            console.error(error);
            setLoader(false);
        }
    }
    if (loading) {
        return <section className="flex justify-center items-center min-h-[100vh]">
        <Image src="/Rolling-1s-200px.svg" width={'60px'} height={"60px"} />
    </section>
    }
    if (error) {
        return <p className="text-red-500">Error: {error.message}</p>;
    }
    if (!user) {
        return <p>You must be logged in to manage vouchers.</p>;
    }
    const generateRandomCode = () => {
        const randomCode = Math.random().toString(36).substring(2, 10);
        setForm({ ...form, code: randomCode });
    }

    return (
        <div className='mx-auto'>
          <Head>
                <title>Vouchers</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/pc_favicon.ico" />
            </Head>
            {/* header */}
            <Header />
            {/* banner */}
            <div className="max-w-7xl mx-auto px-8 py-8 min-h-[80vh] sm:px-16">
            <h1 className="text-3xl font-extrabold text-center py-5">Voucher Management</h1>
            <div className="formContainer mt-10">
            <form onSubmit={(e)=>{handleSubmit(e)}} className="mb-4">
                <div className=" grid gap-3 grid-cols-2">
                            <div className="grid-cols-6">
                                <label className='text-lg font-medium'>Voucher Code</label>
                                <div className="flex flex-row">
                                <input
                                    required
                                    name='code'
                                    className='w-full border-2 border-gray-100 rounded-xl p-3 mt-1 bg-transparent focus:outline-none focus:border-logo-red focus:ring-1 focus:ring-logo-red'
                                    placeholder="Example: 1234ABCD"
                                    type={"text"}
                                    value={form.code}
                                    onChange={handleChange}
                                >
                                </input>
                               <FontAwesomeIcon icon={faRandom} className='mt-2 ml-2 md:inline-flex bg-logo-red text-white rounded-full p-2 mr-2 cursor-pointer hover:scale-105 transition transform duration-200 ease-out active:scale-90 ' onClick={generateRandomCode}/>
                                </div>
                </div>
                <div className="grid-cols-6">
                    <label className='text-lg font-medium'>Discount Value</label>
                    <input
                        required
                        name='discountValue'
                        className='w-full border-2 border-gray-100 rounded-xl p-3 mt-1 bg-transparent focus:outline-none focus:border-logo-red focus:ring-1 focus:ring-logo-red'
                        placeholder="Example: 10 for 10% discount"
                        type={"number"}
                        value={form.discountValue===0?'':form.discountValue}
                        
                        onChange={handleChange}
                    
                    />
                    <select name="discountType" id="discountType" className='w-full border-2 border-gray-100 rounded-xl p-3 mt-1 bg-transparent focus:outline-none focus:border-logo-red focus:ring-1 focus:ring-logo-red' onChange={handleChange} value={form.discountType}>
                        <option value="percentage">Percentage</option>
                        <option value="amount">Amount</option>
                    </select>
                </div>
                <div className="grid-cols-6">
                    <label className='text-lg font-medium'>Expiry Date</label>
                    <input
                        required
                        name='expiryDate'
                        className='w-full border-2 border-gray-100 rounded-xl p-3 mt-1 bg-transparent focus:outline-none focus:border-logo-red focus:ring-1 focus:ring-logo-red'
                        type={"date"}
                        
                        value={form.expiryDate}
                        onChange={handleChange}
                    />
                </div>
                <div className="grid-cols-6">
                    <label className='text-lg font-medium'>Remaining Uses</label>
                    <input
                        required
                        name='remainingUses'
                        className='w-full border-2 border-gray-100 rounded-xl p-3 mt-1 bg-transparent focus:outline-none focus:border-logo-red focus:ring-1 focus:ring-logo-red'
                        placeholder="Put -1 for unlimited uses or a number for limited uses"
                        type={"number"}
                        value={form.remainingUses!==1?form.remainingUses:''}
                        onChange={handleChange}
                    />
                </div>
                </div>
                
                <div className="col-span-12 text-center mt-12">
                                {
                                    !btnLoading ?
                                        <button
                                            type='submit'
                                            className='active:scale-[.98]  active:duration-75 transition-all hover:scale-[1.01]  ease-in-out transform py-4 bg-logo-red rounded-xl text-white font-bold text-lg w-1/2 justify-center'>Add </button>
                                        :
                                        <div class="flex items-center justify-center">
                                            <button type="button"
                                                class="inline-flex items-center justify-center py-4 text-sm font-semibold leading-6 text-white transition duration-150 w-full ease-in-out bg-logo-red rounded-xl shadow cursor-not-allowed hover:bg-logo-red"
                                                disabled="">
                                                <svg class="w-5 h-5 mr-3 -ml-1 text-white animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none"
                                                    viewBox="0 0 24 24">
                                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                                    <path class="opacity-75" fill="currentColor"
                                                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                                                    </path>
                                                </svg>
                                                Uploading...
                                            </button>
                                        </div>
                                }
                </div>
                <div>

                
            </div>
        
            </form>
            </div>
            <h2 className="text-2xl font-semibold mb-2 text-center">Existing Vouchers</h2>
            {
                <div className='overflow-x-auto'>
                    <table className='table-auto min-w-full rounded-full ' >
                        <thead >
                            <tr className='rounded-full'>
                                <th className='border px-4 py-2 text-sm  md:text-lg bg-logo-red text-white '>Code</th>
                                <th className='border px-4 py-2 text-sm md:text-lg bg-logo-red text-white' >Discount</th>
                                <th className='border px-4 py-2 text-sm md:text-lg bg-logo-red text-white'>Expiry Date</th>
                               <th className='border px-4 py-2 text-sm md:text-lg bg-logo-red text-white'>Remaining Uses</th>
                            </tr>
                        </thead> 
                        <tbody>
                            {vouchers.map((voucher) => (
                                <tr key={voucher.id}>
                                    <td className='border px-4 py-2 cursor-pointer text-xs md:text-lg' align='right'  onClick={()=>{
                                        navigator.clipboard.writeText(voucher.code);
                                        toast.success('Copied to clipboard');
                                    }}>{voucher.code}</td>
                                    <td className='border px-4 py-2 text-xs md:text-lg' align='right'>{voucher.discountValue+ (voucher.discountType==="percentage"?"%":"$")}</td>
                                    <td className='border px-4 py-2 text-xs md:text-lg' align='right'>{voucher.expiryDate?.toDate&& voucher.expiryDate?.toDate()?.toLocaleDateString()}</td>
                                   <td className='border px-4 py-2 text-xs md:text-lg'align='right'>{voucher.remainingUses}</td>
                                   <button onClick={() => handleDelete(voucher.id)}  ><FontAwesomeIcon icon={faTrashCan} className=' md:inline-flex mt-2 ml-1 bg-logo-red text-white rounded-full p-2 mr-2 cursor-pointer hover:scale-105 transition transform duration-200 ease-out active:scale-90'/></button>
                                </tr>
                                
                            ))
                        }
                        {vouchers.length<=0 && <tr><td colSpan={4} className='text-center'>No Vouchers Found</td></tr>}
                        </tbody>
                    </table>
                    </div>
                }
            </div>
            
            <Footer />
            <ToastContainer
                position="top-center"
                autoClose={2000}
                hideProgressBar={false}
                newestOnTop
                closeOnClick
                rtl={false}
                pauseOnFocusLoss
                draggable
                pauseOnHover
                theme="light"
            />
            
        </div>
    );
};

export default VoucherManager;
